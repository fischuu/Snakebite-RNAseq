# vim: set filetype=sh :

rule star_create_index:
    """
    Create genome index for reference genome (STAR).
    """
    input:
        fasta=config["genome"],
        annot=config["annot"]
    output:
        "%s/chrName.txt" % (config["star-index"])
    log:
        "%s/logs/STAR/createIndex.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/STAR/createIndex.benchmark.tsv" % (config["project-folder"])
    threads:20
    params:
       overhang=config["params"]["star"]["overhang"],
       genomeSAindexNbases=config["params"]["star"]["genomeSAindexNbases"],
       genomeChrBinNbits=config["params"]["star"]["genomeChrBinNbits"],
       limitGenomeGenerateRAM=config["params"]["star"]["limitGenomeGenerateRAM"],
       sparseD=config["params"]["star"]["sparseD"],
       mode=config["params"]["star"]["mode"],
       starfolder=config["star-index"]
    singularity: config["singularity"]["star"]
    shell:"""
        mkdir -p {params.starfolder}
       
        if [ "{params.mode}" = "meta" ];
        then

          STAR --runThreadN {threads} \
               --runMode genomeGenerate \
               --genomeDir {params.starfolder} \
               --genomeFastaFiles {input.fasta} \
               --limitGenomeGenerateRAM {params.limitGenomeGenerateRAM} \
               --genomeSAindexNbases {params.genomeSAindexNbases} \
               --genomeChrBinNbits {params.genomeChrBinNbits} \
               --genomeSAsparseD {params.sparseD} 2> {log}

        else
          
          STAR --runThreadN {threads} \
               --runMode genomeGenerate \
               --genomeDir {params.starfolder} \
               --genomeFastaFiles {input.fasta} \
               --sjdbGTFfile {input.annot} \
               --limitGenomeGenerateRAM {params.limitGenomeGenerateRAM} \
               --genomeSAindexNbases {params.genomeSAindexNbases} \
               --genomeChrBinNbits {params.genomeChrBinNbits} \
               --genomeSAsparseD {params.sparseD} \
               --sjdbOverhang {params.overhang} 2> {log}
        fi
    """

rule rsem_create_index:
    """
    Create Genome Index (RSEM).
    """
    input:
        fasta="%s" % (config["genome"]),
        annot="%s" % (config["annot"]),
        dir="%s/Reference/" % (config["project-folder"])
    output:
        "%s/Reference/RSEM.chrlist" % (config["project-folder"])
    params:
      out="%s/Reference/RSEM" % (config["project-folder"])
    log:
        "%s/logs/RSEM/create_index.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/RSEM/create_index.benchmark.tsv" % (config["project-folder"])
    threads: 20
    singularity: config["singularity"]["rsem"]
    shell:"""
       rsem-prepare-reference -p {threads} --gtf {input.annot} --star {input.fasta} {params.out} &> {log}
    """
    
rule Concatenate_lanes:
    """
    Concatenate the demultiplexed fastq files (BASH).
    """
    input:
      R1=get_fastq_for_concatenating_read1,
      R2=get_fastq_for_concatenating_read2
    output:
      R1=temp("%s/FASTQ/CONCATENATED/{samples}_R1.fastq.gz" % (config["project-folder"])),
      R2=temp("%s/FASTQ/CONCATENATED/{samples}_R2.fastq.gz" % (config["project-folder"]))
    log:
        "%s/logs/Concatenate/catFastq_{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/Concatenate/{samples}.benchmark.tsv" % (config["project-folder"])
    threads: 1
    params:
       infolder="%s/FASTQ/RAW" % (config["project-folder"]),
       outfolder="%s/FASTQ/CONCATENATED" % (config["project-folder"])
    shell:"""
        echo "Number of threads used:" {threads}
        mkdir -p {params.outfolder}
        cat {params.infolder}/{wildcards.samples}*_R1_001.fastq.gz > {output.R1} 2> {log}
        cat {params.infolder}/{wildcards.samples}*_R2_001.fastq.gz > {output.R2} 2> {log}
  	"""    
    
